{"version":3,"sources":["components/button.tsx","components/canvas.tsx","utils/colors.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","style","padding","display","cursor","marginRight","marginBottom","fontSize","backgroundColor","color","border","Canvas","colors","rectSize","itemsPerRow","itemsPerColumn","canvas","React","useRef","drawRect","useCallback","x","y","red","green","blue","current","ctx","getContext","fillStyle","fillRect","updateCanvas","i","useEffect","length","ref","width","height","rgbToHsl","map","c","r","g","b","max","Math","min","Array","fill","h","s","l","d","rgbToLuminance","sqrt","pow","rgbSorter","shuffle","random","luminance","c1","c2","hslSorter","hue","sat","lightness","App","useState","setColors","handleSort","type","tempColors","sortType","sort","index","sortColors","initColors","start","increment","limit","rgb","push","getRgbValues","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34e31646.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst Button: React.FC<Props> = (props) => {\n  const styles = {\n    padding: '.5rem .75rem',\n    display: 'inline-block',\n    cursor: 'pointer',\n    marginRight: '.5rem',\n    marginBottom: '.5rem',\n    fontSize: '.875rem',\n    backgroundColor: '#1c54b9',\n    color: '#fff',\n    border: 0,\n  } as React.CSSProperties;\n\n  return <button style={styles} {...props} />;\n};\n\nexport default Button;\n","import React from 'react';\nimport { Color } from '../utils/types';\n\ninterface Rect {\n  x: number;\n  y: number;\n  color: Color;\n}\n\ninterface Props {\n  colors: Color[];\n  rectSize: number;\n  itemsPerRow: number;\n  itemsPerColumn: number;\n}\n\nconst Canvas: React.FC<Props> = ({\n  colors,\n  rectSize,\n  itemsPerRow,\n  itemsPerColumn,\n}) => {\n  const canvas = React.useRef<HTMLCanvasElement>(null);\n  const styles = {\n    width: '100%',\n    display: 'block',\n    marginBottom: '2rem',\n  } as React.CSSProperties;\n\n  const drawRect = React.useCallback(\n    ({ x, y, color: [red, green, blue] }: Rect): void => {\n      if (canvas.current) {\n        const ctx = canvas.current.getContext('2d');\n\n        if (ctx) {\n          ctx.fillStyle = `rgb(${red},${green},${blue})`;\n          ctx.fillRect(x, y, rectSize, rectSize);\n        }\n      }\n    },\n    [rectSize]\n  );\n\n  const updateCanvas = React.useCallback((): void => {\n    let i = 0;\n    for (let x = 0; x < itemsPerRow; x++) {\n      for (let y = 0; y < itemsPerColumn; y++) {\n        drawRect({\n          x: x * rectSize,\n          y: y * rectSize,\n          color: colors[i],\n        });\n        i++;\n      }\n    }\n  }, [colors, drawRect, itemsPerColumn, itemsPerRow, rectSize]);\n\n  React.useEffect(() => {\n    if (colors.length) {\n      updateCanvas();\n    }\n  }, [colors, updateCanvas]);\n\n  return (\n    <canvas\n      ref={canvas}\n      width={itemsPerRow * rectSize}\n      height={itemsPerColumn * rectSize}\n      style={styles}\n    />\n  );\n};\n\nexport default Canvas;\n","import { Color, SortType } from './types';\n\ninterface HslSortObject {\n\tcolor: Color;\n\tindex: number;\n}\n\ntype RgbSorter = { [key in SortType]?: (color1: Color, color2: Color) => number };\ntype HslSorter = { [key in SortType]?: (color1: HslSortObject, color2: HslSortObject) => number };\n\n// Generate rgb values\n// 256 is not a valid rgb value\n// Will be resolved to 255 by the browser\nexport function getRgbValues(start: number = 8, increment: number = 8, limit: number = 256): Color[] {\n\tlet colors: Color[] = [];\n\n\tfor (let red = start; red <= limit; red += increment) {\n\t\tfor (let blue = start; blue <= limit; blue += increment) {\n\t\t\tfor (let green = start; green <= limit; green += increment) {\n\t\t\t\tconst rgb: Color = [ red, green, blue ];\n\t\t\t\tcolors.push(rgb);\n\t\t\t}\n\t\t}\n\t}\n\treturn colors;\n}\n\n// Source: https://stackoverflow.com/a/11923973/807838\nexport function rgbToHsl(color: Color): Color {\n\tconst [ r, g, b ] = color.map((c) => (c /= 256));\n\n\tconst max = Math.max(r, g, b);\n\tconst min = Math.min(r, g, b);\n\n\tlet [ h, s, l ]: Color = Array(3).fill((max + min) / 2);\n\n\tif (max === min) {\n\t\th = s = 0; // achromatic\n\t} else {\n\t\tconst d = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n\t\tswitch (max) {\n\t\t\tcase r:\n\t\t\t\th = (g - b) / d + (g < b ? 6 : 0);\n\t\t\t\tbreak;\n\t\t\tcase g:\n\t\t\t\th = (b - r) / d + 2;\n\t\t\t\tbreak;\n\t\t\tcase b:\n\t\t\t\th = (r - g) / d + 4;\n\t\t\t\tbreak;\n\t\t}\n\n\t\th /= 6;\n\t}\n\n\treturn [ h, s, l ];\n}\n\n// Source: https://stackoverflow.com/a/596243/807838\nfunction rgbToLuminance([ red, green, blue ]: Color): number {\n\treturn Math.sqrt(0.299 * Math.pow(red, 2) + 0.587 * Math.pow(green, 2) + 0.114 * Math.pow(blue, 2));\n}\n\nconst rgbSorter: RgbSorter = {\n\tshuffle() {\n\t\treturn Math.random() - 0.5;\n\t},\n\tluminance(c1, c2) {\n\t\treturn rgbToLuminance(c1) - rgbToLuminance(c2);\n\t}\n};\n\nconst hslSorter: HslSorter = {\n\thue(c1, c2) {\n\t\tif (c1.color[0] > c2.color[0]) return 1;\n\t\tif (c1.color[0] < c2.color[0]) return -1;\n\t\treturn 0;\n\t},\n\tsat(c1, c2) {\n\t\tif (c1.color[1] > c2.color[1]) return 1;\n\t\tif (c1.color[1] < c2.color[1]) return -1;\n\t\treturn 0;\n\t},\n\tlightness(c1, c2) {\n\t\tif (c1.color[2] > c2.color[2]) return 1;\n\t\tif (c1.color[2] < c2.color[2]) return -1;\n\t\treturn 0;\n\t}\n};\n\nexport function sortColors(sortType: SortType, colors: Color[]) {\n\tswitch (sortType) {\n\t\tcase 'luminance':\n\t\tcase 'shuffle':\n\t\t\treturn [ ...colors ].sort(rgbSorter[sortType]);\n\n\t\tcase 'hue':\n\t\tcase 'sat':\n\t\tcase 'lightness':\n\t\t\treturn colors\n\t\t\t\t.map((c, i) => ({ color: rgbToHsl(c), index: i })) // track index for after sort\n\t\t\t\t.sort(hslSorter[sortType])\n\t\t\t\t.map((c) => colors[c.index]);\n\n\t\tdefault:\n\t\t\treturn colors;\n\t}\n}\n","import React from 'react';\nimport Button from './components/button';\nimport Canvas from './components/canvas';\n\nimport { getRgbValues, sortColors } from './utils/colors';\nimport { Color, SortType } from './utils/types';\n\nimport './styles/main.scss';\n\nfunction App() {\n  const [colors, setColors] = React.useState<Color[]>([]);\n\n  React.useEffect(() => {\n    initColors();\n  }, []);\n\n  function handleSort(type: SortType) {\n    const tempColors = sortColors(type, colors);\n    setColors(tempColors);\n  }\n\n  function initColors() {\n    setColors(getRgbValues());\n  }\n\n  if (!colors.length) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <Canvas\n        colors={colors}\n        rectSize={5}\n        itemsPerColumn={128}\n        itemsPerRow={256}\n      />\n      <h2>Sort colours</h2>\n      <Button onClick={() => initColors()}>Reset</Button>\n      <Button onClick={() => handleSort('shuffle')}>Shuffle</Button>\n      <Button onClick={() => handleSort('luminance')}>Luminance</Button>\n      <Button onClick={() => handleSort('hue')}>Hue</Button>\n      <Button onClick={() => handleSort('sat')}>Sat</Button>\n      <Button onClick={() => handleSort('lightness')}>Lightness</Button>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}